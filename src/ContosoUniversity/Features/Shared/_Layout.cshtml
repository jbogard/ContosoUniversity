<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title - Contoso University</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    @Scripts.Render("~/bundles/lodash")
    <script type="text/javascript">
        var appInsights=window.appInsights||function(config){
            function s(config){t[config]=function(){var i=arguments;t.queue.push(function(){t[config].apply(t,i)})}}var t={config:config},r=document,f=window,e="script",o=r.createElement(e),i,u;for(o.src=config.url||"//az416426.vo.msecnd.net/scripts/a/ai.0.js",r.getElementsByTagName(e)[0].parentNode.appendChild(o),t.cookie=r.cookie,t.queue=[],i=["Event","Exception","Metric","PageView","Trace"];i.length;)s("track"+i.pop());return config.disableExceptionTracking||(i="onerror",s("_"+i),u=f[i],f[i]=function(config,r,f,e,o){var s=u&&u(config,r,f,e,o);return s!==!0&&t["_"+i](config,r,f,e,o),s}),t
        }({
            instrumentationKey:"615aadc5-8508-46e7-aa93-713181a155ae"
        });
        
        window.appInsights=appInsights;
        appInsights.trackPageView();
    </script>
</head>
<body>
    <div class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                @Html.ActionLink("Contoso University", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
            </div>
            <div class="navbar-collapse collapse">
                <ul class="nav navbar-nav">
                    <li>@Html.ActionLink("Home", "Index", "Home")</li>
                    <li>@Html.ActionLink("About", "About", "Home")</li>
                    <li>@Html.ActionLink("Students", "Index", "Student")</li>
                    <li>@Html.ActionLink("Courses", "Index", "Course")</li>
                    <li>@Html.ActionLink("Instructors", "Index", "Instructor")</li>
                    <li>@Html.ActionLink("Departments", "Index", "Department")</li>
                </ul>
                @Html.Partial("_LoginPartial")
            </div>
        </div>
    </div>
    <div class="container body-content">
        @RenderBody()
        <hr />
        <footer>
            <p>&copy; @DateTime.Now.Year - Contoso University</p>
        </footer>
    </div>

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("scripts", required: false)
<script type="text/javascript">
    var highlightFields = function (response) {

        $('.form-group').removeClass('has-error');

        $.each(response, function (propName, val) {
            var nameSelector = '[name = "' + propName.replace(/(:|\.|\[|\])/g, "\\$1") + '"]',
                idSelector = '#' + propName.replace(/(:|\.|\[|\])/g, "\\$1");
            var $el = $(nameSelector) || $(idSelector);

            if (val.Errors.length > 0) {
                $el.closest('.form-group').addClass('has-error');
            }
        });
    };
    var highlightErrors = function (xhr) {
        try {
            var data = JSON.parse(xhr.responseText);
            highlightFields(data);
            showSummary(data);
            window.scrollTo(0, 0);
        } catch (e) {
            // (Hopefully) caught by the generic error handler in `config.js`.
        }
    };
    var showSummary = function (response) {
        $('#validationSummary').empty().removeClass('hidden');

        var verboseErrors = _.flatten(_.pluck(response, 'Errors')),
            errors = [];

        var nonNullErrors = _.reject(verboseErrors, function (error) {
            return error.ErrorMessage.indexOf('must not be empty') > -1;
        });

        _.each(nonNullErrors, function (error) {
            errors.push(error.ErrorMessage);
        });

        if (nonNullErrors.length !== verboseErrors.length) {
            errors.push('The highlighted fields are required to submit this form.');
        }

        var $ul = $('#validationSummary').append('<ul></ul>');

        _.each(errors, function (error) {
            var $li = $('<li></li>').text(error);
            $li.appendTo($ul);
        });
    };
    var redirect = function (data) {
        if (data.redirect) {
            window.location = data.redirect;
        } else {
            window.scrollTo(0, 0);
            window.location.reload();
        }
    };

    $('form[method=post]').not('.no-ajax').on('submit', function () {
        var submitBtn = $(this).find('[type="submit"]');

        submitBtn.prop('disabled', true);
        $(window).unbind();

        var $this = $(this),
            formData = $this.serialize();

        $this.find('div').removeClass('has-error');

        $.ajax({
            url: $this.attr('action'),
            type: 'post',
            data: formData,
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
            dataType: 'json',
            statusCode: {
                200: redirect
            },
            complete: function () {
                submitBtn.prop('disabled', false);
            }
        }).error(highlightErrors);

        return false;
    });

</script>
</body>
</html>
